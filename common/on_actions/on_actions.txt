on_actions = {
	### LaR DLC
	# called when an operative performing an offensive mission in a country
	# has been spotted
	on_operative_on_mission_spotted = {

		effect = {
			log = "[GetDateText] [From.GetName]: on_operative_on_mission_spotted in [Root.GetName] OPERATIVE: [This.GetName]"
            # SCOPE  the operative
            # ROOT   the country the operative was performing its mission in
            # FROM   the country the operative is operating for

			# base values
			set_temp_variable = {
				var = capture_chance
				value = 90
			}
			set_temp_variable = {
				var = kill_chance
				value = 10
			}

            # nullify kill chance for some missions
			if = {
				limit = {
					OR = {
						operative_leader_mission = control_trade
						operative_leader_mission = diplomatic_pressure
					}
				}
				set_temp_variable = {
					var = kill_chance
					value = 0
				}
			}

            # Capture chance modifier unused as it would just increased or decrease death chance
            #multiply_temp_variable = {
            #   var = capture_chance
            #   value = own_capture_chance_factor # the operative's capture chance modifiers
            #}
            #clamp_temp_variable = {
            #   var = capture_chance
            #   min = 0
            #   max = 100
            #}

			random_list = {
                #log = yes # log picked effect in game.log

				temp_var:capture_chance = {
					capture_operative = {
						captured_by = ROOT
					}
				}

				temp_var:kill_chance = {
					kill_operative = {
						killed_by = ROOT
					}
				}

			}

		}

	}

	on_operative_captured = {
		effect = {
			log = "[GetDateText] [From.GetName]: on_operative_captured by [Root.GetName] OPERATIVE: [This.GetName]"
			# SCOPE  the operative
			# ROOT   the country the operative was performing its mission in
			# FROM   the country the operative is operating for
			operative_leader_event = {
					id = lar_operative_event.6
					recipient = ROOT
					originator = ROOT
					set_from_from = ROOT
					set_from = FROM
					days = 1
			}
			if = {
				limit = {
					NOT = { has_unit_leader_flag = le_clerc1 }
				}
				set_unit_leader_flag = le_clerc1
			}
			else_if = {
				limit = {
					has_unit_leader_flag = le_clerc1
				}
				set_unit_leader_flag = le_clerc2
			}
			random_list = {
				log = yes
				90 = { #regular
					operative_leader_event = {
						id = lar_operative_event.1
						set_from_from = ROOT
					}
				}
				10 = { #operative turned
					modifier = {
						has_trait = operative_tough
						factor = 0 #tough operatives never get turned
					}
					modifier = {
						has_trait = operative_double_agent
						factor = 0 #no tripple agents please
					}
					turn_operative = { turned_by = ROOT }
					# ensure the operative has the nationality of the country he is coming from
					add_nationality = FROM
					operative_leader_event = {
						id = lar_operative_event.5
						set_from_from = FROM #tells the event which nationality to add
					}
				}
			}
		}
	}

	on_operative_death = {
		effect = {
			# SCOPE  the operative
			# ROOT   the killer country (optional)
			# FROM   the country the operative is operating for
			if = {
				limit = {
					country_exists = ROOT
				}
				log = "[GetDateText] [From.GetName]: on_operative_death, killed by [Root.GetName] OPERATIVE: [This.GetName]"

				# operative killed by a country, likelly while on mission
				operative_leader_event = {
					id = lar_operative_event.3
					set_from_from = ROOT
				}
			}
			else = {
				# other cause of death
				log = "[GetDateText] [From.GetName]: on_operative_death OPERATIVE: [This.GetName]"
			}

			if = {
				limit = {
					FROM = {
						NOT = { is_ai = yes }
						has_done_agency_upgrade = upgrade_suicide_pills
					}
				}
				set_global_flag = kill_me_alive_flag
			}
		}
	}

	# SCOPE_UNIT_LEADER [
	#	ROOT, FROM
	#	FROM.FROM : SCOPE_STATE ( will only be set if the operation has a specific selection_target )
	# ]
	on_operative_detected_during_operation = {
		effect = {
			log = "[GetDateText] [From.GetName]: on_operative_detected_during_operation OPERATIVE: [This.GetName]"
			random_list = {
				40 = {
					force_operative_leader_into_hiding = 45
					operative_leader_event = {
						id = lar_operative_event.2
						set_from_from = FROM
					}
				}
				35 = {
					capture_operative = {
						captured_by = FROM
					}
				}
				20 = {
					harm_operative_leader = 90
					operative_leader_event = {
						id = lar_operative_event.4
						set_from_from = FROM
					}
				}
				5 = {
					kill_operative = {
						killed_by = FROM
					}
				}
			}
		}
	}

	on_weekly = {
		effect = {
			if = {
				limit = {
					has_intelligence_agency = yes
					is_ai = yes
				}
				update_operation_ai = yes
			}
		}
	}

	on_startup = {
		effect = {
			#Party Popularity setup
			for_each_scope_loop = {
				array = countries
				if = {
					add_dynamic_modifier = { modifier = party_popularity_dynamic_modifier }
				}
			}

			#UI Setup
			every_country = {
				limit = {
					is_ai = no
				}
				set_country_flag = show_welcome_splash
				country_event = {
					id = worldnews.13
					days = 1096
					random = 4320
				}
			}

			#Player Array
			if = {
				limit = {
					check_variable = {global.players^num > 1}
				}
				set_global_flag = is_mp
				else = {
					set_global_flag = is_not_mp
				}
			}

			#Core Removal
			random_country = {
				limit = { is_ai = yes }
				country_event = kr.political.10
			}
			OTT = {
				give_resource_rights = { receiver = GER state = 447 }
				give_resource_rights = { receiver = GER state = 446 }
				give_resource_rights = { receiver = GER state = 349 }
			}
			PER = {
				give_resource_rights = { receiver = GER state = 413 }
			}
			SRI = {
				give_resource_rights = { receiver = FRA state = 448 }
			}
			UKR = {
				give_resource_rights = { receiver = GER state = 46 }
			}
			GEA={every_owned_state={
				if = { 
					limit = { NOT={ is_core_of=GEA } 
					}
					add_compliance = 100 
				}
				GEA={	GER={remove_resource_rights = PREV.PREV} 
					give_resource_rights = { receiver = GER state = PREV }
			}	}
			}
		}
	}

	# called a country fully decrypts cipher of a target country
	# scope is the target country that its cipher is decrypted
	# from scope is the decrypter country
	on_fully_decrypted_cipher = {
		effect = {
			log = "[GetDateText] [From.GetName]: on_fully_decrypted_cipher TARGET: [Root.GetName]"
		}
	}

	# called when a country activates its active cipher bonuses against a target
	# scope is the target country
	# from scope is the country that activates its bonuses
	on_activated_active_decryption_bonuses = {
		effect = {
			log = "[GetDateText] [From.GetName]: on_activated_active_decryption_bonuses TARGET: [Root.GetName]"
		}
	}

	#ROOT is subject FROM is previous overlord
	on_subject_free = {
		effect = {
			log = "[GetDateText] [Root.GetName]: on_subject_free FORMER OVERLORD: [From.GetName]"
			clr_country_flag = KR_can_raise_autonomy_level
			#clr_country_flag = KR_can_lower_autonomy_level
			#clr_country_flag = KR_can_be_annexed
			clr_country_flag = KR_can_become_free
		}
	}

	#ROOT is subject FROM is overlord
	on_subject_autonomy_level_change = {

		effect = {
			log = "[GetDateText] [Root.GetName]: on_subject_autonomy_level_change OVERLORD: [From.GetName]"
			clr_country_flag = KR_can_raise_autonomy_level
			#clr_country_flag = KR_can_lower_autonomy_level
		}
	}

	#ROOT is subject FROM is overlord
	on_subject_annexed = {
		effect = {
			log = "[GetDateText] [Root.GetName]: on_subject_annexed OVERLORD: [From.GetName]"
			clr_country_flag = KR_can_raise_autonomy_level
			#clr_country_flag = KR_can_lower_autonomy_level
			#clr_country_flag = KR_can_be_annexed
			clr_country_flag = KR_can_become_free
		}
	}

	#ROOT is winner #FROM is loser

	# ROOT is capitulated country, FROM is winner
	on_capitulation = {
		effect = {
			log = "[GetDateText] [Root.GetName] has capitulated to [From.GetName]"
			news_event = country_capitulated.0
			if = {
				limit = {
					OR = {
						is_in_faction_with = GER
						is_subject_of = GER
					}
					is_in_asia = yes
				}
			}
			if = {
				limit = {
					OR = {
						is_in_faction_with = HOL
						is_subject_of = HOL
					}
					is_in_asia = yes
				}
			}
			if = {
				limit = {
					tag = FRA
					NOT = { has_global_flag = FRA_capitulated }
				}
				country_event = { id = capt.40 days = 1 }
			}
			#Russian-Bulgarian alliance
			if = {
				limit = {
					tag = BUL
					is_in_faction_with = RUS
					NOT = {
						any_of_scopes = {
							array = RUS.faction_members
							is_subject = no
						}
					}
				}
			}
			# double-checking exile system
			if = {
				limit = {
					OR = {
						is_in_faction = yes
						is_subject = yes
					}
				}
				country_event = { id = kr.political.80 hours = 3 }
				every_country = {
					limit = { is_exiled_in = ROOT }
					country_event = { id = kr.political.80 hours = 3 }
				}
			}
		}
	}

	# ROOT is previously capitulated country
	on_uncapitulation = {
		effect = {
			log = "[GetDateText] [Root.GetName] has uncapitulated"
		}
	}

	on_leave_faction = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_leave_faction FROM = [From.GetName]"
			FROM = {
				add_opinion_modifier = {
					modifier = faction_traitor
					target = ROOT
					days = 365
				}

				add_opinion_modifier = {
					modifier = faction_traitor_trade
					target = ROOT
					days = 365
				}
			}
			ROOT = {
				if = {
					limit = { NOT = { has_country_flag = AI_move_unit_check } }
					country_event = kr.political.200
				}
			}
			FROM = {
				if = {
					limit = { NOT = { has_country_flag = AI_move_unit_check } }
					country_event = kr.political.200
				}
			}
		}
	}

	# FROM = country giving access, ROOT = country asking for access
	on_military_access = {
		effect = {
			log = "[GetDateText] [Root.GetName] has asked for military access to [From.GetName]"
		}
	}

	# FROM = country receiving access, ROOT = country offering access
	on_offer_military_access = {
		effect = {
			log = "[GetDateText] [Root.GetName] has offered military access to [From.GetName]"
		}
	}

	# FROM = country being called, ROOT = country calling
	on_call_allies = {
		effect = {
			log = "[GetDateText] [Root.GetName] has called its ally [From.GetName] into its war"
		}
	}

	# FROM = country being joined, ROOT = country joining
	on_join_allies = {
		effect = {
			log = "[GetDateText] [Root.GetName] is joining [From.GetName] in its war"
		}
	}

	# FROM = country receiving goods, ROOT = country sending goods
	on_lend_lease = {
		effect = {
			log = "[GetDateText] [Root.GetName] is offering a lend lease to [From.GetName]"
		}
	}

	# FROM = country requesting goods, ROOT = country sending goods
	on_incoming_lend_lease = {
		effect = {
			log = "[GetDateText] [From.GetName] has requested a lend lease from [From.GetName]"
		}
	}

	# FROM = country receiving volunteers, ROOT = country sending volunteers
	on_send_volunteers = {
		effect = {
			log = "[GetDateText] [Root.GetName] is sending volunteers to [From.GetName]"
			country_event = { id = kr.political.200 days = 30 }
		}
	}

	# FROM = country to which they're sent, ROOT = sending country
	on_send_expeditionary_force = {
		effect = {
			log = "[GetDateText] [Root.GetName] is sending an expeditionary force to [From.GetName]"
			country_event = { id = kr.political.200 days = 30 }
		}
	}

	# FROM = country from which the forces are returning, ROOT = country who sent them
	on_return_expeditionary_forces = {
		effect = {
			log = "[GetDateText] [Root.GetName] is recalling its expeditionary force from [From.GetName]"
		}
	}

	# FROM = country requesting them, ROOT = requesting country
	on_request_expeditionary_forces = {
		effect = {
			log = "[GetDateText] [From.GetName] has requested expeditionary forces from [Root.GetName]"
		}
	}

	# FROM = country on whom the wargoal is being generated, ROOT = country generating wargoal
	on_generate_wargoal = {
		effect = {
			log = "[GetDateText] [Root.GetName] is generating a wargoal on [From.GetName]"
		}
	}

	# FROM = country giving control of the state, ROOT = country asking for control of the state
	on_ask_for_state_control = {
		effect = {
			log = "[GetDateText] [Root.GetName] is asking for state control from [From.GetName]"
		}
	}

	# FROM = country accepting control of the state, ROOT = country giving control of the state
	on_give_state_control = {
		effect = {
			log = "[GetDateText] [Root.GetName] is giving state control to [From.GetName]"
		}
	}

	#FROM is state #ROOT is broken as hell
	on_nuke_drop = {
		effect = {
			news_event = { id = nuke_dropped.2 days = 1}
			news_event = { id = nuke_dropped.3 days = 1}
			news_event = { id = nuke_dropped.4 days = 1}
			news_event = { id = nuke_dropped.5 days = 1}
			news_event = { id = nuke_dropped.6 days = 1}
			news_event = { id = nuke_dropped.7 days = 1}
			news_event = { id = nuke_dropped.8 days = 1}
			news_event = { id = nuke_dropped.9 days = 1}
			news_event = { id = nuke_dropped.10 days = 1}
			news_event = { id = nuke_dropped.11 days = 1}
			news_event = { id = nuke_dropped.12 days = 1}
			news_event = { id = nuke_dropped.13 days = 1}
			news_event = { id = nuke_dropped.14 days = 1}
			news_event = { id = nuke_dropped.15 days = 1}
		}
		random_events = {
			100 = nuke_dropped.0
		}
	}

	# Ace pilots
	# country, FROM = ace
	on_ace_promoted = {
		random_events = {
			100 = ace_promoted.1
			5 = ace_promoted.2
		}
	}

	# country, FROM = ace, PREV = enemy ace
	# This event fires twice, once for each ace.
	on_aces_killed_each_other = {
		random_events = {
			100 = aces_killed_each_other.1
		}
	}

	# country, FROM = our ace,
	# PREV = enemy ace, has killed FROM
	on_ace_killed_by_ace = {
		random_events = {
			100 = ace_killed_by_ace.1
		}
	}

	# country, FROM = our ace,
	# PREV = enemy ace, killed by FROM
	on_ace_killed_other_ace = {
		random_events = {
			100 = ace_killed_other_ace.1
		}
	}

	# country, FROM = ace
	on_ace_killed = {
		random_events = {
			100 = ace_died.1
		}
	}

	#used when puppeting in a peace conference
	#ROOT = nation being puppeted, FROM = overlord
	on_puppet = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_puppet FROM = [From.GetName]"
			ROOT = {
				remove_all_ministers = yes
				set_puppet_minister = yes
			}
		}
	}

	#used when puppeting through the occupied territories menu during peace time (or when releasing from non-core but owned territory, f.e. Britain releasing Egypt)
	#ROOT = nation being released, FROM = overlord
	on_release_as_puppet = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_release_as_puppet FROM = [From.GetName]"
			ROOT = {
				remove_all_ministers = yes
				set_puppet_minister = yes
			}
		}
	}

	#ROOT is free nation FROM is releaser
	on_release_as_free = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_release_as_free FROM = [From.GetName]"
			ROOT = {
				remove_all_ministers = yes
				set_puppet_minister = yes
			}
		}
	}

	#FROM is country getting invited.
	on_offer_join_faction = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_offer_join_faction FROM = [From.GetName]"
			# removing from Japan's economic sphere
		}
	}

	#FROM is faction leader on join faction requests. THIS DOES NOT FIRE ON ADD_TO_FACTION EFFECT! USE ON_OFFER_JOIN_FACTION!
	on_join_faction = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_join_faction FROM = [From.GetName]"
		}
	}

	# When a new faction is formed
	on_faction_formed = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_faction_formed"
		}
	}

	on_government_change = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_government_change"
			country_event = kr.political.41 #opinion modifiers
			country_event = kr.political.12 #puppet ministers

			if = {
				limit = {
					is_in_array = { global.asian_economic_sphere = ROOT }
					has_socialist_government = yes
				}
			}

			else_if = {
				limit = {
					tag = HAW
					OR = {
						has_country_flag = HAW_monarchy_restored
						has_country_flag = HAW_republic_declared
						has_country_flag = HAW_revolution_commune_declared
					}
				}
				if = {
					limit = {
						has_country_flag = HAW_revolution_commune_declared
						has_socialist_government = no
					}
					clr_country_flag = HAW_revolution_commune_declared
					set_country_flag = HAW_republic_declared
				}
				else_if = {
					limit = {
						NOT = { has_country_flag = HAW_revolution_commune_declared }
						has_socialist_government = yes
					}
					set_country_flag = HAW_revolution_commune_declared
					clr_country_flag = HAW_monarchy_restored
					clr_country_flag = HAW_republic_declared
				}
				else_if = {
					limit = {
						has_country_flag = HAW_monarchy_restored
						has_elected_government = no
					}
					clr_country_flag = HAW_monarchy_restored
					set_country_flag = HAW_republic_declared
				}
			}
			else_if = {
				limit = {
					is_co_prosperity_candidate = yes
					is_puppet_of = JAP
				}
				add_to_array = { global.JAP_possible_allies_array = ROOT }
				set_variable = { ROOT.japanese_economic_influence = 0 }
			}
		}
	}

	on_army_leader_daily = {}

	# From is owner country
	on_army_leader_won_combat = {
		effect = {
			if = {
				limit = {
					NOT = { has_unit_leader_flag = recent_leader_event }
					check_variable = { random < 0.05 }
				}
				log = "[GetDateText] [Root.GetName] on_army_leader_won_combat [From.GetName]"
				set_unit_leader_flag = unit_leader_event
				unit_leader_event = { id = unit_leader.10 }
			}
		}
	}

	# From is owner country
	on_army_leader_lost_combat = {
		effect = {
			if = {
				limit = {
					NOT = { has_unit_leader_flag = recent_leader_event }
					check_variable = { random < 0.06 }
				}
				log = "[GetDateText] [Root.GetName] on_army_leader_lost_combat [From.GetName]"
				set_unit_leader_flag = unit_leader_event
				unit_leader_event = { id = unit_leader.10 }
			}
		}
	}

	on_army_leader_promoted = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_army_leader_promoted [From.GetName]"
			add_timed_unit_leader_trait = {
				trait = recently_promoted
				days = 100
			}
		}
	}

	# New Scopes
	# Scope is the country owner of the PotF, FROM is the country of the killer
	on_pride_of_the_fleet_sunk = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_pride_of_the_fleet_sunk [From.GetName]"

		}
	}

	#ROOT is winner #FROM gets annexed - This fires just before FROM gets annexed, meaning the country and everything it owns still exists. It will also fire on_annex and on_civil_war_end
	on_civil_war_end_before_annexation = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_civil_war_end_before_annexation [From.GetName]"

		}
	}
	on_civil_war_end = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_civil_war_end [From.GetName]"

		}
	}
	on_unit_leader_created = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_unit_leader_created"
			if = {
				limit = { is_exiled_leader = yes }
				From.From = { save_event_target_as = exile_nation }
				retire = yes

				random_country = {
					limit = {
						is_in_faction_with = event_target:exile_nation
						is_faction_leader = yes
						is_ai = no
					}
					save_event_target_as = exile_host
				}

				event_target:exile_nation = {
					random_army_leader = {
						set_nationality = event_target:exile_host
						#add_unit_leader_trait = exiled_leader (doesn't work yet so I commented it out. PDX pls fix)
						set_variable = { exile_tag = event_target:exile_nation.id }
					}
				}
			}
		}
	}

	on_government_exiled = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_government_exiled"
		}
	}

	#Root is exile
	#From is new host
	#FromFrom is old host
	on_host_changed_from_capitulation = {
		effect = {
			#Transfer exile leaders to new host
			From.From = {
				every_army_leader = {
					limit = { is_exiled_leader_from = Root }
					set_nationality = Root.From
				}
			}
		}
	}

	#Root is exile
	#From is old host
	on_exile_government_reinstated = {
		effect = {
			From = {
				set_temp_variable = { exile_tag_check = ROOT.id }
				every_army_leader = {
					limit = {
						OR = {
							is_exiled_leader_from = ROOT
							check_variable = { exile_tag = exile_tag_check }
						}
					}
					set_nationality = Root
				}
			}
			Root = {
				every_army_leader = {
					limit = { is_exiled_leader_from = ROOT }
					remove_unit_leader_trait = exiled_leader
					remove_exile_tag = yes
				}
			}
		}
	}

	on_war = {
		effect = {
			log = "[GetDateText]: [From.GetName]: on_war"
			# News events
			if = {
				limit = {
					tag = GER
					has_war_with = FRA
				}
				news_event = {
					id = worldnews.5
					days = 2
				}
			}
		}
	}

	on_peace = {
		effect = {
			log = "[GetDateText]: [From.GetName]: on_peace"
			#Remove British Loyalist templates
			if = {
				limit = { has_country_flag = CAN_has_british_loyalists }
				clr_country_flag = CAN_has_british_loyalists
				delete_unit_template_and_units = { division_template = "Loyalist Rebels" }
				delete_unit_template_and_units = { division_template = "Loyalist Mountaineers" }
			}
			if = {
				limit = { has_country_flag = CAN_has_irish_loyalists }
				clr_country_flag = CAN_has_irish_loyalists
				delete_unit_template_and_units = { division_template = "Unionist Rebels" }
			}
		}
	}
	on_weekly_VEN={
		effect={
			every_country = {
				limit= {
					has_war=yes
					is_playable_country = yes
				}
				refresh_click_effect = yes
			}
			update_pacific_war=yes
		}
	}
	on_daily = {
		effect = {
			if = {
				limit = {
					GEA = {
						has_capitulated = yes
						}
					}
					GER = {
						annex_country = {
						target = GEA
					}
				}
			}
			if = {
				limit = {
					UKR = {
						has_capitulated = yes
					}
					GER = {
						annex_country = {
						target = UKR
						transfer_troops = yes
						}
					}
				}
			}
		}
	}
	on_daily_VEN={
		effect={
			for_each_scope_loop={
				array=GLOBAL.fuel_system_manager
				set_variable={GLOBAL.controllerscope=THIS.id}
				for_each_scope_loop={
					array = THIS.faction_members_array
					set_variable={GLOBAL.currentscope=THIS.id}
					if={
						limit={check_variable={send_fuel_enabled >1}}
						set_variable={fuelbedarf=min_fuel}
						subtract_from_variable={fuelbedarf=fuel_ratio}
						set_variable={fuelbedarfanteil=fuelbedarf}
						multiply_variable={fuelbedarf=max_fuel_k}
						set_variable={fuelbedarfvorzeichen=fuelbedarf}
						multiply_variable={fuelbedarfvorzeichen=-1}
						set_variable={fuelbedarf_k=fuelbedarf}
						set_variable={fuelbedarfvorzeichen_k=fuelbedarfvorzeichen}
						multiply_variable={fuelbedarfvorzeichen=1000}
						multiply_variable={fuelbedarf=1000}
						set_variable={PREV.fuelbedarf=PREV.min_fuel}
						subtract_from_variable={PREV.fuelbedarf=PREV.fuel_ratio}
						set_variable={PREV.fuelbedarfanteil=PREV.fuelbedarf}
						multiply_variable={PREV.fuelbedarf=PREV.max_fuel_k}
						set_variable={PREV.fuelbedarfvorzeichen=PREV.fuelbedarf}
						multiply_variable={PREV.fuelbedarfvorzeichen=-1}
						multiply_variable={PREV.fuelbedarfvorzeichen=1000}
						multiply_variable={PREV.fuelbedarf=1000}
						set_variable={PREV.free_stockpile=PREV.max_fuel_k}
						subtract_from_variable={PREV.free_stockpile=PREV.fuel_k}
						multiply_variable={PREV.free_stockpile=1000}
						set_variable={PREV.free_stockpilenegativ=PREV.free_stockpile}
						multiply_variable={PREV.free_stockpilenegativ=-1}
						set_variable={countryfuelplus5=fuel_ratio}
						add_to_variable={countryfuelplus5=0.05}
						if={limit={
								check_variable={PREV.fuelbedarf <0}
								check_variable={min_fuel > countryfuelplus5}
							}
							if={
								limit={
									check_variable={fuelbedarf >0}
									check_variable={PREV.fuelbedarfvorzeichen >fuelbedarf}
								}
								set_temp_variable={PREV.mastergain=fuelbedarfvorzeichen}
								set_temp_variable={subjectgain=fuelbedarf}
								PREV={
									add_fuel=mastergain
								}
								add_fuel=subjectgain
							}
							else={
								set_temp_variable={PREV.mastergain=fuelbedarfvorzeichen}
								set_temp_variable={subjectgain=fuelbedarf}
								PREV={
									add_fuel=mastergain
								}
								add_fuel=subjectgain
								set_temp_variable={PREV.test2=PREV.fuelbedarfvorzeichen}
							}
						}
						else_if={
							limit={
								check_variable={fuelbedarf <0}
								check_variable={PREV.fuel_ratio <0.95}
							}
							if={
								limit={
									check_variable={fuelbedarfvorzeichen <PREV.free_stockpile}
								}
								set_temp_variable={PREV.mastergain=fuelbedarfvorzeichen}
								set_temp_variable={subjectgain=fuelbedarf}
								PREV={
									add_fuel=mastergain
								}
								add_fuel=subjectgain
							}
							else_if={limit={check_variable={PREV.free_stockpile>1000}}
								set_temp_variable={PREV.mastergain=PREV.free_stockpile}
								set_temp_variable={subjectgain=PREV.free_stockpilenegativ}
								PREV={
									add_fuel=mastergain
								}
								add_fuel=subjectgain
							}
						}
						else_if={
							limit={
								check_variable={fuel_ratio <0.95}
								check_variable={PREV.fuel_ratio >0.95}
							}
							set_variable={free_stockpile=max_fuel_k}
							subtract_from_variable={free_stockpile=fuel_k}
							multiply_variable={free_stockpile=1000}
							set_variable={free_stockpilenegativ=free_stockpile}
							multiply_variable={free_stockpilenegativ=-1}
							set_variable={master_spare_fuel=PREV.max_fuel_k}
							multiply_variable={master_spare_fuel=0.03}
							multiply_variable={master_spare_fuel=1000}
							set_variable={master_spare_fuelnegativ=master_spare_fuel}
							multiply_variable={master_spare_fuelnegativ=-1}
							if={limit={check_variable={free_stockpile<mastersparefuel}}
								set_temp_variable={PREV.mastergain=free_stockpilenegativ}
								set_temp_variable={subjectgain=free_stockpile}}
							else={
								set_temp_variable={PREV.mastergain=master_spare_fuelnegativ}
								set_temp_variable={subjectgain=master_spare_fuel}
							}
							PREV={
								add_fuel=mastergain
							}
							add_fuel=subjectgain
						}
					}
				}
			}
			for_each_scope_loop={
				array=GLOBAL.fuel_countries
				set_temp_variable={currentfuel=fuel_ratio}
				subtract_from_temp_variable={currentfuel=1}
				multiply_temp_variable={currentfuel = 88}
				set_variable={fuel_bar_fuel=currentfuel}
			}
		}
	}
	on_startup = { 
	
		effect = {
			every_country={
				limit={	has_country_flag=fuel_system_enabled}
				add_to_array={GLOBAL.fuel_system_manager=THIS.id}
			}
			GER = {
				every_country = {
					limit = {
						NOT={tag=GER}
						OR={is_in_faction_with = GER
							AND={GER={tag=GER}tag=SPR}}
						NOT = { is_in_array = { GER.faction_members_array = THIS.id } }
					}
					add_to_array = { GER.faction_members_array = THIS.id }
				}
				if = {
					limit = {
						any_of_scopes={array=GER.faction_members_array NOT={is_in_array={GLOBAL.fuel_countries=THIS.id}}}
					}
					for_each_scope_loop={
						array=GER.faction_members_array
						if={limit={NOT={is_in_array={GLOBAL.fuel_countries=THIS.id}}}
							add_to_array={GLOBAL.fuel_countries=THIS.id}}
					}
				}
				set_variable={send_fuel_enabled=2}
				for_each_scope_loop={
					array=GER.faction_members_array
					set_variable={send_fuel_enabled=2}
				}
			}
			ENG = {
				every_country = {
					limit = {
						NOT={tag=ENG}
						OR={is_in_faction_with = ENG
							AND={ENG={tag=GER}tag=SPR}}
						NOT = { is_in_array = { ENG.faction_members_array = THIS.id } }
					}
					add_to_array = { ENG.faction_members_array = THIS.id }
				}
				if = {
					limit = {
						any_of_scopes={array=ENG.faction_members_array NOT={is_in_array={GLOBAL.fuel_countries=THIS.id}}}
					}
					for_each_scope_loop={
						array=ENG.faction_members_array
						if={limit={NOT={is_in_array={GLOBAL.fuel_countries=THIS.id}}}
							add_to_array={GLOBAL.fuel_countries=THIS.id}}
					}
				}
				set_variable={send_fuel_enabled=2}
				for_each_scope_loop={
					array=ENG.faction_members_array
					set_variable={send_fuel_enabled=2}
				}
			}
			CAN = {
				every_country = {
					limit = {
						NOT={tag=CAN}
						OR={is_in_faction_with = CAN
							AND={CAN={tag=GER}tag=SPR}}
						NOT = { is_in_array = { CAN.faction_members_array = THIS.id } }
					}
					add_to_array = { CAN.faction_members_array = THIS.id }
				}
				if = {
					limit = {
						any_of_scopes={array=CAN.faction_members_array NOT={is_in_array={GLOBAL.fuel_countries=THIS.id}}}
					}
					for_each_scope_loop={
						array=CAN.faction_members_array
						if={limit={NOT={is_in_array={GLOBAL.fuel_countries=THIS.id}}}
							add_to_array={GLOBAL.fuel_countries=THIS.id}}
					}
				}
				set_variable={send_fuel_enabled=2}
				for_each_scope_loop={
					array=CAN.faction_members_array
					set_variable={send_fuel_enabled=2}
				}
			}

		}
		
	}
}